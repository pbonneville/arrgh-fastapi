name: Reusable PR Validation

on:
  workflow_call:
    inputs:
      # Size configuration
      small_max_lines:
        description: 'Maximum lines for small PRs'
        required: false
        type: number
        default: 400
      small_max_files:
        description: 'Maximum files for small PRs'
        required: false
        type: number
        default: 10
      medium_max_lines:
        description: 'Maximum lines for medium PRs'
        required: false
        type: number
        default: 800
      medium_max_files:
        description: 'Maximum files for medium PRs'
        required: false
        type: number
        default: 15
      large_max_lines:
        description: 'Maximum lines before PR fails'
        required: false
        type: number
        default: 1500
      large_max_files:
        description: 'Maximum files before PR fails'
        required: false
        type: number
        default: 25
      
      # Feature toggles
      enable_size_validation:
        description: 'Enable PR size validation'
        required: false
        type: boolean
        default: true
      enable_auto_labeling:
        description: 'Enable automatic labeling'
        required: false
        type: boolean
        default: true
      enable_description_validation:
        description: 'Enable description section validation'
        required: false
        type: boolean
        default: true
      enable_security_scanning:
        description: 'Enable security file scanning'
        required: false
        type: boolean
        default: true
      enable_metrics_reporting:
        description: 'Enable PR metrics reporting'
        required: false
        type: boolean
        default: true
      
      # Configuration
      config_file_path:
        description: 'Path to configuration file (optional)'
        required: false
        type: string
        default: '.github/pr-automation-config.yml'
      standards_path:
        description: 'Path to PR standards documentation'
        required: false
        type: string
        default: 'Anthropic/Claude/Global/PR-STANDARDS.md'
      
      # Conventional commits
      allowed_types:
        description: 'Comma-separated list of allowed commit types'
        required: false
        type: string
        default: 'feat,fix,docs,style,refactor,test,build,chore,perf,ci'
      require_scope:
        description: 'Require scope in conventional commit format'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-pr:
    name: Validate PR Standards
    runs-on: ubuntu-latest
    if: inputs.enable_size_validation || inputs.enable_auto_labeling
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Load Configuration
        id: load-config
        run: |
          CONFIG_FILE="${{ inputs.config_file_path }}"
          
          # Set default values from inputs
          echo "small_max_lines=${{ inputs.small_max_lines }}" >> $GITHUB_OUTPUT
          echo "small_max_files=${{ inputs.small_max_files }}" >> $GITHUB_OUTPUT
          echo "medium_max_lines=${{ inputs.medium_max_lines }}" >> $GITHUB_OUTPUT
          echo "medium_max_files=${{ inputs.medium_max_files }}" >> $GITHUB_OUTPUT
          echo "large_max_lines=${{ inputs.large_max_lines }}" >> $GITHUB_OUTPUT
          echo "large_max_files=${{ inputs.large_max_files }}" >> $GITHUB_OUTPUT
          
          # Override with config file if it exists
          if [ -f "$CONFIG_FILE" ]; then
            echo "Configuration file found: $CONFIG_FILE"
            # Parse YAML config file (basic parsing)
            if grep -q "small:" "$CONFIG_FILE"; then
              SMALL_LINES=$(grep -A2 "small:" "$CONFIG_FILE" | grep "max_lines:" | awk '{print $2}')
              SMALL_FILES=$(grep -A2 "small:" "$CONFIG_FILE" | grep "max_files:" | awk '{print $2}')
              [ ! -z "$SMALL_LINES" ] && echo "small_max_lines=$SMALL_LINES" >> $GITHUB_OUTPUT
              [ ! -z "$SMALL_FILES" ] && echo "small_max_files=$SMALL_FILES" >> $GITHUB_OUTPUT
            fi
          else
            echo "No configuration file found at $CONFIG_FILE, using input defaults"
          fi

      - name: Validate PR Title (Conventional Commits)
        uses: amannn/action-semantic-pull-request@v5
        with:
          types: ${{ inputs.allowed_types }}
          requireScope: ${{ inputs.require_scope }}
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          ignoreLabels: |
            bot
            ignore-semantic-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR Size
        if: inputs.enable_size_validation
        id: pr-size
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get changed files and lines
          CHANGED_FILES=$(gh pr view $PR_NUMBER --json files --jq '.files | length')
          ADDITIONS=$(gh pr view $PR_NUMBER --json additions --jq '.additions')
          DELETIONS=$(gh pr view $PR_NUMBER --json deletions --jq '.deletions')
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
          
          # Get thresholds from config
          SMALL_LINES="${{ steps.load-config.outputs.small_max_lines }}"
          SMALL_FILES="${{ steps.load-config.outputs.small_max_files }}"
          MEDIUM_LINES="${{ steps.load-config.outputs.medium_max_lines }}"
          MEDIUM_FILES="${{ steps.load-config.outputs.medium_max_files }}"
          LARGE_LINES="${{ steps.load-config.outputs.large_max_lines }}"
          LARGE_FILES="${{ steps.load-config.outputs.large_max_files }}"
          
          echo "Changed files: $CHANGED_FILES"
          echo "Total line changes: $TOTAL_CHANGES"
          echo "Thresholds - Small: $SMALL_LINES lines/$SMALL_FILES files, Medium: $MEDIUM_LINES lines/$MEDIUM_FILES files"
          
          # Set outputs
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
          echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
          
          # Check size thresholds
          if [ $TOTAL_CHANGES -gt $MEDIUM_LINES ] || [ $CHANGED_FILES -gt $MEDIUM_FILES ]; then
            echo "size_warning=true" >> $GITHUB_OUTPUT
          else
            echo "size_warning=false" >> $GITHUB_OUTPUT
          fi
          
          if [ $TOTAL_CHANGES -gt $LARGE_LINES ] || [ $CHANGED_FILES -gt $LARGE_FILES ]; then
            echo "size_error=true" >> $GITHUB_OUTPUT
          else
            echo "size_error=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Large PR
        if: inputs.enable_size_validation && steps.pr-size.outputs.size_warning == 'true'
        run: |
          STANDARDS_PATH="${{ inputs.standards_path }}"
          COMMENT_BODY="## 📏 Large PR Detected
          
          This PR is larger than recommended guidelines:
          - **Files changed**: ${{ steps.pr-size.outputs.changed_files }} (recommended: ≤${{ steps.load-config.outputs.small_max_files }})
          - **Total changes**: ${{ steps.pr-size.outputs.total_changes }} lines (recommended: ≤${{ steps.load-config.outputs.small_max_lines }})
          
          ### Recommendations:
          - Consider breaking this into smaller, focused PRs
          - Add extra context in the description to help reviewers
          - Include detailed testing instructions
          - Consider using a draft PR for early feedback
          
          ### Guidelines:
          - **Small PR**: ≤${{ steps.load-config.outputs.small_max_lines }} lines, ≤${{ steps.load-config.outputs.small_max_files }} files
          - **Medium PR**: ${{ steps.load-config.outputs.small_max_lines }}-${{ steps.load-config.outputs.medium_max_lines }} lines, ${{ steps.load-config.outputs.small_max_files }}-${{ steps.load-config.outputs.medium_max_files }} files  
          - **Large PR**: ${{ steps.load-config.outputs.medium_max_lines }}+ lines, ${{ steps.load-config.outputs.medium_max_files }}+ files (requires justification)
          
          See [PR Standards]($STANDARDS_PATH) for more details."
          
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail on Extremely Large PR
        if: inputs.enable_size_validation && steps.pr-size.outputs.size_error == 'true'
        run: |
          echo "::error::PR is extremely large (${{ steps.pr-size.outputs.total_changes }} lines, ${{ steps.pr-size.outputs.changed_files }} files). Please break into smaller PRs."
          exit 1

  auto-label:
    name: Auto-label PR
    runs-on: ubuntu-latest
    if: inputs.enable_auto_labeling
    needs: validate-pr
    steps:
      - name: Extract PR Type
        id: pr-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # Extract type from conventional commit format
          TYPE=$(echo "$PR_TITLE" | sed -n 's/^\([a-z]*\).*/\1/p')
          echo "Extracted type: $TYPE"
          echo "type=$TYPE" >> $GITHUB_OUTPUT

      - name: Apply Labels Based on Type
        run: |
          TYPE="${{ steps.pr-type.outputs.type }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          case $TYPE in
            feat)
              gh pr edit $PR_NUMBER --add-label "enhancement"
              ;;
            fix)
              gh pr edit $PR_NUMBER --add-label "bug"
              ;;
            docs)
              gh pr edit $PR_NUMBER --add-label "documentation"
              ;;
            test)
              gh pr edit $PR_NUMBER --add-label "testing"
              ;;
            refactor)
              gh pr edit $PR_NUMBER --add-label "refactoring"
              ;;
            style)
              gh pr edit $PR_NUMBER --add-label "style"
              ;;
            build|ci)
              gh pr edit $PR_NUMBER --add-label "ci-cd"
              ;;
            perf)
              gh pr edit $PR_NUMBER --add-label "performance"
              ;;
            chore)
              gh pr edit $PR_NUMBER --add-label "chore"
              ;;
            *)
              echo "Unknown or no type found: $TYPE"
              ;;
          esac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Breaking Changes
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Check for breaking change indicators
          if [[ "$PR_TITLE" == *"!"* ]] || [[ "$PR_BODY" == *"BREAKING CHANGE"* ]]; then
            echo "Breaking change detected!"
            gh pr edit $PR_NUMBER --add-label "breaking-change"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-description:
    name: Validate PR Description
    runs-on: ubuntu-latest
    if: inputs.enable_description_validation
    steps:
      - name: Check Required Sections
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          STANDARDS_PATH="${{ inputs.standards_path }}"
          
          # Check for required sections
          MISSING_SECTIONS=""
          
          if [[ "$PR_BODY" != *"## Summary"* ]]; then
            MISSING_SECTIONS="$MISSING_SECTIONS\n- Summary"
          fi
          
          if [[ "$PR_BODY" != *"## Changes Made"* ]]; then
            MISSING_SECTIONS="$MISSING_SECTIONS\n- Changes Made"
          fi
          
          if [[ "$PR_BODY" != *"## Testing"* ]]; then
            MISSING_SECTIONS="$MISSING_SECTIONS\n- Testing"
          fi
          
          if [[ "$PR_BODY" != *"## PR Checklist"* ]]; then
            MISSING_SECTIONS="$MISSING_SECTIONS\n- PR Checklist"
          fi
          
          if [ ! -z "$MISSING_SECTIONS" ]; then
            COMMENT_BODY="## 📋 PR Description Missing Required Sections
            
            The following required sections are missing from your PR description:
            $MISSING_SECTIONS
            
            ### Required Sections:
            - **Summary** - Brief overview of what and why
            - **Changes Made** - Key modifications
            - **Testing** - Steps to test and coverage info
            - **PR Checklist** - Quality assurance checklist
            
            Please update your PR description to include these sections.
            See our [PR Standards]($STANDARDS_PATH) for the complete template."
            
            gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
            gh pr edit $PR_NUMBER --add-label "needs-description-update"
          else
            echo "All required sections present!"
            # Remove the label if it exists
            gh pr edit $PR_NUMBER --remove-label "needs-description-update" || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-check:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    if: inputs.enable_security_scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Security-Related Changes
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get list of changed files
          CHANGED_FILES=$(gh pr view $PR_NUMBER --json files --jq -r '.files[].path')
          
          SECURITY_KEYWORDS="auth|security|password|token|secret|key|crypto|ssl|tls|cert"
          SECURITY_FILES=""
          
          echo "Checking changed files for security-related content..."
          
          while IFS= read -r file; do
            if [[ "$file" =~ $SECURITY_KEYWORDS ]]; then
              SECURITY_FILES="$SECURITY_FILES\n- $file"
            fi
          done <<< "$CHANGED_FILES"
          
          # Check for dependency changes
          DEPENDENCY_FILES=""
          while IFS= read -r file; do
            if [[ "$file" == *"package.json"* ]] || [[ "$file" == *"requirements.txt"* ]] || [[ "$file" == *"Gemfile"* ]] || [[ "$file" == *"go.mod"* ]]; then
              DEPENDENCY_FILES="$DEPENDENCY_FILES\n- $file"
            fi
          done <<< "$CHANGED_FILES"
          
          # Apply labels if security or dependency changes detected
          if [ ! -z "$SECURITY_FILES" ]; then
            echo "Security-related files detected!"
            gh pr edit $PR_NUMBER --add-label "security"
          fi
          
          if [ ! -z "$DEPENDENCY_FILES" ]; then
            echo "Dependency files detected!"
            gh pr edit $PR_NUMBER --add-label "dependencies"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-metrics:
    name: PR Metrics Collection
    runs-on: ubuntu-latest
    if: inputs.enable_metrics_reporting
    steps:
      - name: Collect and Report Metrics
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get PR data
          PR_DATA=$(gh pr view $PR_NUMBER --json additions,deletions,files,title,body,author,createdAt)
          
          ADDITIONS=$(echo "$PR_DATA" | jq -r '.additions')
          DELETIONS=$(echo "$PR_DATA" | jq -r '.deletions') 
          FILES_COUNT=$(echo "$PR_DATA" | jq -r '.files | length')
          TITLE=$(echo "$PR_DATA" | jq -r '.title')
          AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          
          # Calculate metrics
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
          
          # Get thresholds for size categorization
          SMALL_LINES="${{ inputs.small_max_lines }}"
          SMALL_FILES="${{ inputs.small_max_files }}"
          MEDIUM_LINES="${{ inputs.medium_max_lines }}"
          MEDIUM_FILES="${{ inputs.medium_max_files }}"
          
          # Determine size category
          if [ $TOTAL_CHANGES -le $SMALL_LINES ] && [ $FILES_COUNT -le $SMALL_FILES ]; then
            SIZE_CATEGORY="Small"
            SIZE_EMOJI="🟢"
          elif [ $TOTAL_CHANGES -le $MEDIUM_LINES ] && [ $FILES_COUNT -le $MEDIUM_FILES ]; then
            SIZE_CATEGORY="Medium"
            SIZE_EMOJI="🟡"
          else
            SIZE_CATEGORY="Large"
            SIZE_EMOJI="🔴"
          fi
          
          # Check title format
          ALLOWED_TYPES="${{ inputs.allowed_types }}"
          TYPE_PATTERN=$(echo "$ALLOWED_TYPES" | sed 's/,/|/g')
          if [[ "$TITLE" =~ ^($TYPE_PATTERN)(\(.+\))?: ]]; then
            TITLE_FORMAT="✅ Valid"
          else
            TITLE_FORMAT="❌ Invalid"
          fi
          
          # Create metrics comment
          METRICS_COMMENT="## 📊 PR Metrics
          
          | Metric | Value |
          |--------|-------|
          | **Size Category** | $SIZE_EMOJI $SIZE_CATEGORY |
          | **Lines Added** | +$ADDITIONS |
          | **Lines Deleted** | -$DELETIONS |
          | **Total Changes** | $TOTAL_CHANGES |
          | **Files Changed** | $FILES_COUNT |
          | **Title Format** | $TITLE_FORMAT |
          | **Author** | @$AUTHOR |
          
          ### Size Guidelines:
          - 🟢 **Small**: ≤$SMALL_LINES lines, ≤$SMALL_FILES files
          - 🟡 **Medium**: $SMALL_LINES-$MEDIUM_LINES lines, $SMALL_FILES-$MEDIUM_FILES files
          - 🔴 **Large**: $MEDIUM_LINES+ lines, $MEDIUM_FILES+ files
          
          *Metrics generated automatically by PR Validation workflow*"
          
          gh pr comment $PR_NUMBER --body "$METRICS_COMMENT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 